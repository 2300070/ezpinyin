<?xml version="1.0"?>
<doc>
    <assembly>
        <name>EzPinyin</name>
    </assembly>
    <members>
        <member name="T:EzPinyin.Ascii">
            <summary>
            表示ASCII区字典。
            </summary>
        </member>
        <member name="T:EzPinyin.Basic">
            <summary>
            表示基本汉字的字典。
            </summary>
        </member>
        <member name="T:EzPinyin.Check">
            <summary>
            用于检验一些信息。
            </summary>
        </member>
        <member name="F:EzPinyin.Check.IsIdeEnvironment">
            <summary>
            检测当前环境是否是开发环境。
            </summary>
        </member>
        <member name="T:EzPinyin.Common">
            <summary>
            应用程序所需使用的公共的杂项功能集合。
            </summary>
        </member>
        <member name="F:EzPinyin.Common.LEXICON_FLAG">
            <summary>
            一个标记，表示节点所对应的字符包含词汇信息，在使用时需要额外处理，参看<see cref="T:EzPinyin.LexiconFakeNode"/>。
            </summary>
        </member>
        <member name="T:EzPinyin.Compatibility">
            <summary>
            表示Unicode平面兼容汉字区的字典。
            </summary>
        </member>
        <member name="T:EzPinyin.CompatibilitySupplement">
            <summary>
            表示Unicode平面兼容汉字扩展区的字典。
            </summary>
        </member>
        <member name="T:EzPinyin.ExtensionA">
            <summary>
            表示Unicode平面1汉字A扩展区的字典。
            </summary>
        </member>
        <member name="T:EzPinyin.ExtensionB">
            <summary>
            表示Unicode平面2汉字B扩展区的字典。
            </summary>
        </member>
        <member name="T:EzPinyin.ExtensionC">
            <summary>
            表示Unicode平面2汉字C扩展区的字典。
            </summary>
        </member>
        <member name="T:EzPinyin.ExtensionD">
            <summary>
            表示Unicode平面2汉字D扩展区的字典。
            </summary>
        </member>
        <member name="T:EzPinyin.ExtensionE">
            <summary>
            表示Unicode平面2汉字E扩展区的字典。
            </summary>
        </member>
        <member name="T:EzPinyin.ExtensionF">
            <summary>
            表示Unicode平面2汉字F扩展区的字典。
            </summary>
        </member>
        <member name="T:EzPinyin.ExtensionG">
            <summary>
            表示Unicode平面2汉字G扩展区的字典。
            </summary>
        </member>
        <member name="T:EzPinyin.LexiconFakeNode">
            <summary>
            表示“虚假”的，仅仅用来临时标记词典节点的节点。
            </summary>
            <remarks>
            如果一开始即加载所有的词典节点，将导致应用程序启动时出现较大的延迟，为此，在初始化时，将所有与词条相关的节点标记为需要加载词典节点的节点，当需要真正解析节点对应的字符时，再由该节点加载词典来完成真正的解析任务。
            </remarks>
        </member>
        <member name="P:EzPinyin.LexiconFakeNode.Pinyin">
            <summary>
            获得当前节点的拼音字符串。
            </summary>
        </member>
        <member name="M:EzPinyin.LexiconFakeNode.GetPinyin(System.Char*)">
            <summary>
            获得拼音字符串。
            </summary>
            <param name="cursor">指向输入字符串当前位置的指针，可以作为游标来遍历整个字符串。</param>
            <returns>所获得的字符串。</returns>
        </member>
        <member name="M:EzPinyin.LexiconFakeNode.GetInitial(System.Char*)">
            <summary>
            获得拼音首字母。
            </summary>
            <param name="cursor">指向输入字符串当前位置的指针，可以作为游标来遍历整个字符串。</param>
            <returns>所获得的首字母。</returns>
        </member>
        <member name="M:EzPinyin.LexiconFakeNode.WritePinyin(System.Char*@,System.Char*,System.Text.StringBuilder,System.String)">
            <summary>
            将拼音字符串写入到指定的缓存区，并且自动移动游标到下一个字符的位置。
            </summary>
            <param name="cursor">指向输入字符串当前位置的指针，可以作为游标来遍历整个字符串。</param>
            <param name="end">指向输入字符串最后一个字符位置的指针。</param>
            <param name="buffer">用来存储操作结果的缓存区。</param>
            <param name="separator">额外指定的分隔符。</param>
        </member>
        <member name="M:EzPinyin.LexiconFakeNode.WriteInitial(System.Char*@,System.Char*,System.Text.StringBuilder,System.String)">
            <summary>
            将拼音首字母写入到指定的缓存区，并且自动移动游标到下一个字符的位置。
            </summary>
            <param name="cursor">指向输入字符串当前位置的指针，可以作为游标来遍历整个字符串。</param>
            <param name="end">指向输入字符串最后一个字符位置的指针。</param>
            <param name="buffer">用来存储操作结果的缓存区。</param>
            <param name="separator">额外指定的分隔符。</param>
        </member>
        <member name="M:EzPinyin.LexiconFakeNode.WritePinyin(System.Char*@,System.Char*,System.String[],System.Int32@)">
            <summary>
            将拼音字符串写入到指定的缓存区，并且自动移动游标与索引到下一个字符的位置。
            </summary>
            <param name="cursor">指向输入字符串当前位置的指针，可以作为游标来遍历整个字符串。</param>
            <param name="end">指向输入字符串最后一个字符位置的指针。</param>
            <param name="buffer">用来存储操作结果的缓存区。</param>
            <param name="index">指示操作结果在缓存区中存储位置的索引值。</param>
        </member>
        <member name="M:EzPinyin.LexiconFakeNode.LoadActualNode">
            <summary>
            加载当前节点真正需要用来处理业务的节点。
            </summary>
            <returns>实际加载的节点。</returns>
        </member>
        <member name="T:EzPinyin.LexiconLoader">
            <summary>
            表示用来加载词典节点的类。
            </summary>
        </member>
        <member name="T:EzPinyin.LexiconNode">
            当前算法并未考虑UTF32词汇导致的散列效率降低的问题:
            1.当第一个字符是UTF32字符时，由于读取的第二个char是第一个字符的低半代理，必然导致所有的链表节点获得一样的散列码，从而导致只有一个链表生效。
            2.当第一个字符为UTF16字符，而第二个字符是UTF32字符时，由于读取的第二个char是第二个字符的高半代理，因此同样容易出现散列效果严重下降的问题。，
            但由于目前基本没有UTF32词汇，个别词汇不会影响整体效果，因此暂时不做修补。
            <summary>
            表示一个词汇节点。
            </summary>
            <remarks>
            词汇节点与一般的拼音节点的差别在于：词汇节点在进行解析时首先遍历其关联的链表，链表中的每个节点代表了某个匹配第一个字符的某个词汇的信息，如果词汇与输入字符串匹配，则优先使用链表节点来完成解析处理，当所有链表节点都不满足时，由于每个链表的最后节点即是当前词汇节点的字符节点，因此会自然调用字符节点来做默认处理。
            </remarks>
        </member>
        <member name="P:EzPinyin.LexiconNode.Pinyin">
            <summary>
            获得当前节点的拼音字符串，始终抛出<see cref="T:System.NotSupportedException"/>。
            </summary>
        </member>
        <member name="M:EzPinyin.LexiconNode.Add(System.String,System.String[],EzPinyin.PinyinPriority)">
            <summary>
            为当前节点注册一个词汇与拼音。
            </summary>
            <param name="word">需要注册的词汇。</param>
            <param name="pinyin">该词汇对应的拼音。</param>
            <param name="priority">优先级别。</param>
        </member>
        <member name="M:EzPinyin.LexiconNode.Add(System.String,System.String,EzPinyin.PinyinPriority)">
            <summary>
            为当前节点注册一个词汇与拼音。
            </summary>
            <param name="word">需要注册的词汇。</param>
            <param name="pinyin">该词汇对应的拼音。</param>
            <param name="priority">优先级别。</param>
        </member>
        <member name="M:EzPinyin.LexiconNode.GetPinyin(System.Char*)">
            <summary>
            获得拼音字符串。
            </summary>
            <param name="cursor">指向输入字符串当前位置的指针，可以作为游标来遍历整个字符串。</param>
            <returns>所获得的字符串。</returns>
        </member>
        <member name="M:EzPinyin.LexiconNode.GetInitial(System.Char*)">
            <summary>
            获得拼音首字母。
            </summary>
            <param name="cursor">指向输入字符串当前位置的指针，可以作为游标来遍历整个字符串。</param>
            <returns>所获得的首字母。</returns>
        </member>
        <member name="M:EzPinyin.LexiconNode.WritePinyin(System.Char*@,System.Char*,System.Text.StringBuilder,System.String)">
            <summary>
            将拼音字符串写入到指定的缓存区，并且自动移动游标到下一个字符的位置。
            </summary>
            <param name="cursor">指向输入字符串当前位置的指针，可以作为游标来遍历整个字符串。</param>
            <param name="end">指向输入字符串最后一个字符位置的指针。</param>
            <param name="buffer">用来存储操作结果的缓存区。</param>
            <param name="separator">额外指定的分隔符。</param>
        </member>
        <member name="M:EzPinyin.LexiconNode.WriteInitial(System.Char*@,System.Char*,System.Text.StringBuilder,System.String)">
            <summary>
            将拼音首字母写入到指定的缓存区，并且自动移动游标到下一个字符的位置。
            </summary>
            <param name="cursor">指向输入字符串当前位置的指针，可以作为游标来遍历整个字符串。</param>
            <param name="end">指向输入字符串最后一个字符位置的指针。</param>
            <param name="buffer">用来存储操作结果的缓存区。</param>
            <param name="separator">额外指定的分隔符。</param>
        </member>
        <member name="M:EzPinyin.LexiconNode.WritePinyin(System.Char*@,System.Char*,System.String[],System.Int32@)">
            <summary>
            将拼音字符串写入到指定的缓存区，并且自动移动游标与索引到下一个字符的位置。
            </summary>
            <param name="cursor">指向输入字符串当前位置的指针，可以作为游标来遍历整个字符串。</param>
            <param name="end">指向输入字符串最后一个字符位置的指针。</param>
            <param name="buffer">用来存储操作结果的缓存区。</param>
            <param name="index">指示操作结果在缓存区中存储位置的索引值。</param>
        </member>
        <member name="T:EzPinyin.LinkNode">
            <summary>
            表示一个特定词汇的链表节点的基类。
            </summary>
        </member>
        <member name="F:EzPinyin.LinkNode.Word">
            <summary>
            当前节点相关联的词汇。
            </summary>
        </member>
        <member name="P:EzPinyin.LinkNode.Priority">
            <summary>
            节点的优先级别。
            </summary>
            <remarks>
            高优先级别的节点可以代替低优先级别的节点，优先级相同的情况下，后定义的节点可以替代先定义的节点。
            </remarks>
        </member>
        <member name="P:EzPinyin.LinkNode.Length">
            <summary>
            当前节点相关联的词汇的长度。
            </summary>
        </member>
        <member name="F:EzPinyin.LinkNode.Next">
            <summary>
            当前节点的下一个节点。
            </summary>
        </member>
        <member name="P:EzPinyin.LinkNode.Pinyin">
            <summary>
            获得当前节点的拼音字符串。
            </summary>
        </member>
        <member name="M:EzPinyin.LinkNode.#ctor(System.String,EzPinyin.PinyinPriority)">
            <summary>
            初始化新的实例。
            </summary>
            <param name="word">词汇信息。</param>
            <param name="priority">优先级别。</param>
        </member>
        <member name="M:EzPinyin.LinkNode.GetPinyin(System.Char*)">
            <summary>
            设计用于获得拼音字符串，本案例中则永远抛出<see cref="T:System.NotSupportedException"/>异常。
            </summary>
            <param name="cursor">指向输入字符串当前位置的指针，可以作为游标来遍历整个字符串。</param>
            <returns>此方法永远抛出<see cref="T:System.NotSupportedException"/>，没有返回结果。</returns>
        </member>
        <member name="M:EzPinyin.LinkNode.GetInitial(System.Char*)">
            <summary>
            设计用于获得拼音首字母，本案例中则永远抛出<see cref="T:System.NotSupportedException"/>异常。
            </summary>
            <param name="cursor">指向输入字符串当前位置的指针，可以作为游标来遍历整个字符串。</param>
            <returns>此方法永远抛出<see cref="T:System.NotSupportedException"/>，没有返回结果。</returns>
        </member>
        <member name="T:EzPinyin.LinkNode2">
            <summary>
            表示适用于一个词汇长度为2的链表节点。
            </summary>
        </member>
        <member name="M:EzPinyin.LinkNode2.WritePinyin(System.Char*@,System.Char*,System.Text.StringBuilder,System.String)">
            <summary>
            验证词汇是否匹配，将拼音字符串写入到指定的缓存区，并且自动移动游标到词汇末尾下一个字符的位置。
            </summary>
            <param name="cursor">指向输入字符串当前位置的指针，可以作为游标来遍历整个字符串。</param>
            <param name="end">指向输入字符串最后一个字符位置的指针。</param>
            <param name="buffer">用来存储操作结果的缓存区。</param>
            <param name="separator">额外指定的分隔符。</param>
        </member>
        <member name="M:EzPinyin.LinkNode2.WriteInitial(System.Char*@,System.Char*,System.Text.StringBuilder,System.String)">
            <summary>
            验证词汇是否匹配，将拼音首字母写入到指定的缓存区，并且自动移动游标到词汇末尾下一个字符的位置。
            </summary>
            <param name="cursor">指向输入字符串当前位置的指针，可以作为游标来遍历整个字符串。</param>
            <param name="end">指向输入字符串最后一个字符位置的指针。</param>
            <param name="buffer">用来存储操作结果的缓存区。</param>
            <param name="separator">额外指定的分隔符。</param>
        </member>
        <member name="M:EzPinyin.LinkNode2.WritePinyin(System.Char*@,System.Char*,System.String[],System.Int32@)">
            <summary>
            验证词汇是否匹配，将拼音字符串写入到指定的缓存区，并且自动移动游标到词汇末尾下一个字符的位置。
            </summary>
            <param name="cursor">指向输入字符串当前位置的指针，可以作为游标来遍历整个字符串。</param>
            <param name="end">指向输入字符串最后一个字符位置的指针。</param>
            <param name="buffer">用来存储操作结果的缓存区。</param>
            <param name="index">指示操作结果在缓存区中存储位置的索引值。</param>
        </member>
        <member name="T:EzPinyin.LinkNode3">
            <summary>
            表示适用于一个词汇长度为3的链表节点。
            </summary>
        </member>
        <member name="M:EzPinyin.LinkNode3.WritePinyin(System.Char*@,System.Char*,System.Text.StringBuilder,System.String)">
            <summary>
            验证词汇是否匹配，将拼音字符串写入到指定的缓存区，并且自动移动游标到词汇末尾下一个字符的位置。
            </summary>
            <param name="cursor">指向输入字符串当前位置的指针，可以作为游标来遍历整个字符串。</param>
            <param name="end">指向输入字符串最后一个字符位置的指针。</param>
            <param name="buffer">用来存储操作结果的缓存区。</param>
            <param name="separator">额外指定的分隔符。</param>
        </member>
        <member name="M:EzPinyin.LinkNode3.WriteInitial(System.Char*@,System.Char*,System.Text.StringBuilder,System.String)">
            <summary>
            验证词汇是否匹配，将拼音首字母写入到指定的缓存区，并且自动移动游标到词汇末尾下一个字符的位置。
            </summary>
            <param name="cursor">指向输入字符串当前位置的指针，可以作为游标来遍历整个字符串。</param>
            <param name="end">指向输入字符串最后一个字符位置的指针。</param>
            <param name="buffer">用来存储操作结果的缓存区。</param>
            <param name="separator">额外指定的分隔符。</param>
        </member>
        <member name="M:EzPinyin.LinkNode3.WritePinyin(System.Char*@,System.Char*,System.String[],System.Int32@)">
            <summary>
            验证词汇是否匹配，将拼音字符串写入到指定的缓存区，并且自动移动游标到词汇末尾下一个字符的位置。
            </summary>
            <param name="cursor">指向输入字符串当前位置的指针，可以作为游标来遍历整个字符串。</param>
            <param name="end">指向输入字符串最后一个字符位置的指针。</param>
            <param name="buffer">用来存储操作结果的缓存区。</param>
            <param name="index">指示操作结果在缓存区中存储位置的索引值。</param>
        </member>
        <member name="T:EzPinyin.LinkNode4">
            <summary>
            表示适用于一个词汇长度为4的链表节点。
            </summary>
        </member>
        <member name="M:EzPinyin.LinkNode4.WritePinyin(System.Char*@,System.Char*,System.Text.StringBuilder,System.String)">
            <summary>
            将拼音字符串写入到指定的缓存区，并且自动移动游标到下一个字符的位置。
            </summary>
            <param name="cursor">指向输入字符串当前位置的指针，可以作为游标来遍历整个字符串。</param>
            <param name="end">指向输入字符串最后一个字符位置的指针。</param>
            <param name="buffer">用来存储操作结果的缓存区。</param>
            <param name="separator">额外指定的分隔符。</param>
        </member>
        <member name="M:EzPinyin.LinkNode4.WriteInitial(System.Char*@,System.Char*,System.Text.StringBuilder,System.String)">
            <summary>
            将拼音首字母写入到指定的缓存区，并且自动移动游标到下一个字符的位置。
            </summary>
            <param name="cursor">指向输入字符串当前位置的指针，可以作为游标来遍历整个字符串。</param>
            <param name="end">指向输入字符串最后一个字符位置的指针。</param>
            <param name="buffer">用来存储操作结果的缓存区。</param>
            <param name="separator">额外指定的分隔符。</param>
        </member>
        <member name="M:EzPinyin.LinkNode4.WritePinyin(System.Char*@,System.Char*,System.String[],System.Int32@)">
            <summary>
            将拼音字符串写入到指定的缓存区，并且自动移动游标与索引到下一个字符的位置。
            </summary>
            <param name="cursor">指向输入字符串当前位置的指针，可以作为游标来遍历整个字符串。</param>
            <param name="end">指向输入字符串最后一个字符位置的指针。</param>
            <param name="buffer">用来存储操作结果的缓存区。</param>
            <param name="index">指示操作结果在缓存区中存储位置的索引值。</param>
        </member>
        <member name="T:EzPinyin.LinkNodeX">
            <summary>
            表示适用于一个词汇长度不固定的链表节点。
            </summary>
        </member>
        <member name="M:EzPinyin.LinkNodeX.WritePinyin(System.Char*@,System.Char*,System.Text.StringBuilder,System.String)">
            <summary>
            将拼音字符串写入到指定的缓存区，并且自动移动游标到下一个字符的位置。
            </summary>
            <param name="cursor">指向输入字符串当前位置的指针，可以作为游标来遍历整个字符串。</param>
            <param name="end">指向输入字符串最后一个字符位置的指针。</param>
            <param name="buffer">用来存储操作结果的缓存区。</param>
            <param name="separator">额外指定的分隔符。</param>
        </member>
        <member name="M:EzPinyin.LinkNodeX.WriteInitial(System.Char*@,System.Char*,System.Text.StringBuilder,System.String)">
            <summary>
            将拼音首字母写入到指定的缓存区，并且自动移动游标到下一个字符的位置。
            </summary>
            <param name="cursor">指向输入字符串当前位置的指针，可以作为游标来遍历整个字符串。</param>
            <param name="end">指向输入字符串最后一个字符位置的指针。</param>
            <param name="buffer">用来存储操作结果的缓存区。</param>
            <param name="separator">额外指定的分隔符。</param>
        </member>
        <member name="M:EzPinyin.LinkNodeX.WritePinyin(System.Char*@,System.Char*,System.String[],System.Int32@)">
            <summary>
            将拼音字符串写入到指定的缓存区，并且自动移动游标与索引到下一个字符的位置。
            </summary>
            <param name="cursor">指向输入字符串当前位置的指针，可以作为游标来遍历整个字符串。</param>
            <param name="end">指向输入字符串最后一个字符位置的指针。</param>
            <param name="buffer">用来存储操作结果的缓存区。</param>
            <param name="index">指示操作结果在缓存区中存储位置的索引值。</param>
        </member>
        <member name="T:EzPinyin.PinyinHelper">
            <summary>
            EzPinyin类库的功能入口，用来快速解析拼音、首字母及其他功能。
            </summary>
        </member>
        <member name="M:EzPinyin.PinyinHelper.GetPinyin(System.String,System.String)">
            <summary>
            获得指定的字符串中每个字符的拼音所组成的字符串。
            </summary>
            <param name="text">需要处理的输入字符串。</param>
            <param name="separator">额外指定一个用于分隔的字符串。</param>
            <returns><paramref name="text"/>对应的拼音字符串，如果<paramref name="text"/>为null，则返回null。</returns>
        </member>
        <member name="M:EzPinyin.PinyinHelper.GetArray(System.String)">
            <summary>
            获得指定的字符串中每个字符的拼音，并以数组的形式返回。
            </summary>
            <param name="text">需要处理的输入字符串。</param>
            <returns>包含输入字符串的拼音信息的结果数组，若<paramref name="text"/>为null，则返回null。</returns>
        </member>
        <member name="M:EzPinyin.PinyinHelper.GetInitial(System.String,System.String)">
            <summary>
            获得指定的字符串中每个字符的拼音首字母。
            </summary>
            <param name="text">需要处理的输入字符串。</param>
            <param name="separator">额外指定一个用于分隔的字符串。</param>
            <returns><paramref name="text"/>对应的拼音首字母字符串，如果<paramref name="text"/>为null，则返回null。</returns>
            <remarks>
            这个方法的处理结果不完全等同于对应拼音的声母，虽然很多时候都是一样的。
            </remarks>
        </member>
        <member name="M:EzPinyin.PinyinHelper.LoadFrom(System.String)">
            <summary>
            从指定的文件加载自定义的拼音配置信息。
            </summary>
            <param name="path">配置文件的路径。</param>
            <remarks>
            <para>此方法提供了一种除配置文件之外的方式来批量的重定义字符或者词汇的拼音，与使用配置文件的区别在于：这种方式对文件名没有特别的限制，且不会自动装载，这样就可以在必要的时候按需加载使用。</para>
            <para>此方法不具备线程安全性，因此请注意线程同步。</para>
            </remarks>
        </member>
        <member name="M:EzPinyin.PinyinHelper.Load(System.String)">
            <summary>
            加载指定的拼音配置内容。
            </summary>
            <param name="content">配置内容。</param>
            <remarks>
            <para>此方法提供了一种除配置文件之外的方式来批量的重定义字符或者词汇的拼音，与使用配置文件的区别在于：这种方式不依赖文件，这样就可以在必要的时候按需加载使用。</para>
            <para>此方法不具备线程安全性，因此请注意线程同步。</para>
            </remarks>
        </member>
        <member name="M:EzPinyin.PinyinHelper.Load(System.IO.TextReader)">
            <summary>
            从指定的文本读取器加载指定的拼音配置。
            </summary>
            <param name="reader">用来读取配置内容的文本读取器。</param>
            <remarks>
            <para>此方法提供了一种通用的直接加载配置内容的方法，提供了一种比<see cref="M:EzPinyin.PinyinHelper.Load(System.String)"/>适应性更广的方式以加载配置内容。</para>
            <para>此方法不具备线程安全性，因此请注意线程同步。</para>
            </remarks>
        </member>
        <member name="M:EzPinyin.PinyinHelper.Load(System.IO.Stream,System.Text.Encoding)">
            <summary>
            从指定的数据流加载指定的拼音配置。
            </summary>
            <param name="stream">用来读取配置内容的数据流。</param>
            <param name="encoding">额外指示一个字符编码，默认使用UTF-8编码</param>
            <remarks>
            <para>此方法提供了一种比<see cref="M:EzPinyin.PinyinHelper.LoadFrom(System.String)"/>更细致的解决方案，特别是访问某些有限制条件的资源。</para>
            <para>此方法不具备线程安全性，因此请注意线程同步。</para>
            </remarks>
        </member>
        <member name="M:EzPinyin.PinyinHelper.Define(System.String,System.String)">
            <summary>
            根据提供的信息添加或者重新定义指定字符的拼音。
            </summary>
            <param name="character">字符信息。</param>
            <param name="pinyin">拼音信息。</param>
            <remarks>
            <para>如果字典中已经存在输入字符的拼音信息，则该信息将被覆盖；对于重复定义的情形，以最后一次有效操作为准。</para>
            <para>此方法不具备线程安全性，因此请注意线程同步。</para>
            </remarks>
        </member>
        <member name="M:EzPinyin.PinyinHelper.Define(System.String,System.String[])">
            <summary>
            根据提供的信息添加或者重新定义指定词汇的拼音。
            </summary>
            <param name="word">词汇信息。</param>
            <param name="pinyin">拼音信息。</param>
            <remarks>
            <para>如果词典中已经存在输入词汇的拼音信息，则该信息将被覆盖；对于重复定义的情形，以最后一次有效操作为准。</para>
            <para>此方法不具备线程安全性，多线程环境下可能导致其它方法功能异常，因此请注意线程同步。</para>
            </remarks>
        </member>
        <member name="T:EzPinyin.PinyinNode">
            <summary>
            表示一个拼音节点的基类。
            </summary>
        </member>
        <member name="P:EzPinyin.PinyinNode.IsSymbol">
            <summary>
            指示是否是一个符号。
            </summary>
        </member>
        <member name="P:EzPinyin.PinyinNode.NoPinyin">
            <summary>
            指示是否不包含拼音信息。
            </summary>
        </member>
        <member name="P:EzPinyin.PinyinNode.Pinyin">
            <summary>
            获得当前节点的拼音字符串。
            </summary>
        </member>
        <member name="M:EzPinyin.PinyinNode.GetPinyin(System.Char*)">
            <summary>
            获得拼音字符串。
            </summary>
            <param name="cursor">指向输入字符串当前位置的指针，可以作为游标来遍历整个字符串。</param>
            <returns>所获得的字符串。</returns>
        </member>
        <member name="M:EzPinyin.PinyinNode.GetInitial(System.Char*)">
            <summary>
            获得拼音首字母。
            </summary>
            <param name="cursor">指向输入字符串当前位置的指针，可以作为游标来遍历整个字符串。</param>
            <returns>所获得的首字母。</returns>
        </member>
        <member name="M:EzPinyin.PinyinNode.WritePinyin(System.Char*@,System.Char*,System.Text.StringBuilder,System.String)">
            <summary>
            将拼音字符串写入到指定的缓存区，并且自动移动游标到下一个字符的位置。
            </summary>
            <param name="cursor">指向输入字符串当前位置的指针，可以作为游标来遍历整个字符串。</param>
            <param name="end">指向输入字符串最后一个字符位置的指针。</param>
            <param name="buffer">用来存储操作结果的缓存区。</param>
            <param name="separator">额外指定的分隔符。</param>
        </member>
        <member name="M:EzPinyin.PinyinNode.WriteInitial(System.Char*@,System.Char*,System.Text.StringBuilder,System.String)">
            <summary>
            将拼音首字母写入到指定的缓存区，并且自动移动游标到下一个字符的位置。
            </summary>
            <param name="cursor">指向输入字符串当前位置的指针，可以作为游标来遍历整个字符串。</param>
            <param name="end">指向输入字符串最后一个字符位置的指针。</param>
            <param name="buffer">用来存储操作结果的缓存区。</param>
            <param name="separator">额外指定的分隔符。</param>
        </member>
        <member name="M:EzPinyin.PinyinNode.WritePinyin(System.Char*@,System.Char*,System.String[],System.Int32@)">
            <summary>
            将拼音字符串写入到指定的缓存区，并且自动移动游标与索引到下一个字符的位置。
            </summary>
            <param name="cursor">指向输入字符串当前位置的指针，可以作为游标来遍历整个字符串。</param>
            <param name="end">指向输入字符串最后一个字符位置的指针。</param>
            <param name="buffer">用来存储操作结果的缓存区。</param>
            <param name="index">指示操作结果在缓存区中存储位置的索引值。</param>
        </member>
        <member name="M:EzPinyin.PinyinNode.FillSeparator(EzPinyin.PinyinNode,System.Text.StringBuilder,System.String)">
            <summary>
            填充分隔符。
            </summary>
            <param name="prev">当前节点的前一个节点，如果当前节点为字符串第一个节点，则此参数值为<see cref="F:EzPinyin.UnknownNode.Instance"/>。</param>
            <param name="buffer">需要填充分隔符的可变字符串。</param>
            <param name="separator">需要填充的分隔符。</param>
            <returns>填充分隔符之后的可变字符串。</returns>
        </member>
        <member name="T:EzPinyin.PinyinPriority">
            <summary>
            表示链表中的某个词汇节点所定义的拼音的优先级别。
            </summary>
        </member>
        <member name="F:EzPinyin.PinyinPriority.Low">
            <summary>
            低优先级别，一般是自动推导的异体词汇所使用的优先级别。
            </summary>
        </member>
        <member name="F:EzPinyin.PinyinPriority.Normal">
            <summary>
            一般优先级别，一般是添加项目内置词汇节点时所使用的优先级别。
            </summary>
        </member>
        <member name="F:EzPinyin.PinyinPriority.High">
            <summary>
            高优先级别，一般是从自定义配置文件读取词条或在运行时添加自定义的词汇节点时所使用的优先级别。
            </summary>
        </member>
        <member name="T:EzPinyin.Radicals">
            <summary>
            表示Unicode平面汉字部首扩展区、康熙字典部首区的字典。
            </summary>
        </member>
        <member name="T:EzPinyin.Unknown">
            <summary>
            表示存储了其它未知字符的字典。
            </summary>
        </member>
        <member name="F:EzPinyin.Unknown.Utf16Nodes">
            <summary>
            存储了所有未知UTF16字符的字典。
            </summary>
        </member>
        <member name="F:EzPinyin.Unknown.Utf32Nodes">
            <summary>
            存储了所有未知UTF32字符的字典。
            </summary>
        </member>
        <member name="T:EzPinyin.UnknownNode">
            <summary>
            表示未知的拼音节点。
            </summary>
            <remarks>
            与<see cref="T:EzPinyin.Utf16EmptyNode"/>与<see cref="T:EzPinyin.Utf32EmptyNode"/>不一样的是，<see cref="T:EzPinyin.UnknownNode"/>对应的是非汉字字符。
            </remarks>
        </member>
        <member name="F:EzPinyin.UnknownNode.Instance">
            <summary>
            <see cref="T:EzPinyin.UnknownNode"/>的实例。
            </summary>
        </member>
        <member name="P:EzPinyin.UnknownNode.IsSymbol">
            <summary>
            指示是否是一个符号。
            </summary>
        </member>
        <member name="P:EzPinyin.UnknownNode.NoPinyin">
            <summary>
            指示是否不包含拼音信息。
            </summary>
        </member>
        <member name="P:EzPinyin.UnknownNode.Pinyin">
            <summary>
            获得当前节点的拼音字符串。
            </summary>
        </member>
        <member name="M:EzPinyin.UnknownNode.GetPinyin(System.Char*)">
            <summary>
            获得拼音字符串。
            </summary>
            <param name="cursor">指向输入字符串当前位置的指针，可以作为游标来遍历整个字符串。</param>
            <returns>所获得的字符串。</returns>
        </member>
        <member name="M:EzPinyin.UnknownNode.GetInitial(System.Char*)">
            <summary>
            获得拼音首字母。
            </summary>
            <param name="cursor">指向输入字符串当前位置的指针，可以作为游标来遍历整个字符串。</param>
            <returns>所获得的首字母。</returns>
        </member>
        <member name="M:EzPinyin.UnknownNode.WritePinyin(System.Char*@,System.Char*,System.Text.StringBuilder,System.String)">
            <summary>
            将拼音字符串写入到指定的缓存区，并且自动移动游标到下一个字符的位置。
            </summary>
            <param name="cursor">指向输入字符串当前位置的指针，可以作为游标来遍历整个字符串。</param>
            <param name="end">指向输入字符串最后一个字符位置的指针。</param>
            <param name="buffer">用来存储操作结果的缓存区。</param>
            <param name="separator">额外指定的分隔符。</param>
        </member>
        <member name="M:EzPinyin.UnknownNode.WriteInitial(System.Char*@,System.Char*,System.Text.StringBuilder,System.String)">
            <summary>
            将拼音首字母写入到指定的缓存区，并且自动移动游标到下一个字符的位置。
            </summary>
            <param name="cursor">指向输入字符串当前位置的指针，可以作为游标来遍历整个字符串。</param>
            <param name="end">指向输入字符串最后一个字符位置的指针。</param>
            <param name="buffer">用来存储操作结果的缓存区。</param>
            <param name="separator">额外指定的分隔符。</param>
        </member>
        <member name="M:EzPinyin.UnknownNode.WritePinyin(System.Char*@,System.Char*,System.String[],System.Int32@)">
            <summary>
            将拼音字符串写入到指定的缓存区，并且自动移动游标与索引到下一个字符的位置。
            </summary>
            <param name="cursor">指向输入字符串当前位置的指针，可以作为游标来遍历整个字符串。</param>
            <param name="end">指向输入字符串最后一个字符位置的指针。</param>
            <param name="buffer">用来存储操作结果的缓存区。</param>
            <param name="index">指示操作结果在缓存区中存储位置的索引值。</param>
        </member>
        <member name="M:EzPinyin.UnknownNode.FillSeparator(EzPinyin.PinyinNode,System.Text.StringBuilder,System.String)">
            <summary>
            填充分隔符。
            </summary>
            <param name="prev">当前节点的前一个节点，如果当前节点为字符串第一个节点，则此参数值为<see cref="F:EzPinyin.UnknownNode.Instance"/>。</param>
            <param name="buffer">需要填充分隔符的可变字符串。</param>
            <param name="separator">需要填充的分隔符。</param>
            <returns>填充分隔符之后的可变字符串。</returns>
        </member>
        <member name="T:EzPinyin.UserConfigurationLoader">
            <summary>
            表示用来加载用户自定义拼音的类。
            </summary>
        </member>
        <member name="M:EzPinyin.UserConfigurationLoader.LoadAll">
            <summary>
            触发加载用户自定义配置过程。
            </summary>
        </member>
        <member name="T:EzPinyin.Utf16EmptyNode">
            <summary>
            表示空的UTF16字符节点。
            </summary>
        </member>
        <member name="F:EzPinyin.Utf16EmptyNode.Instance">
            <summary>
            获得空白的UTF16字符节点的实例。
            </summary>
        </member>
        <member name="P:EzPinyin.Utf16EmptyNode.IsSymbol">
            <summary>
            指示是否是一个符号。
            </summary>
        </member>
        <member name="P:EzPinyin.Utf16EmptyNode.NoPinyin">
            <summary>
            指示是否不包含拼音信息。
            </summary>
        </member>
        <member name="P:EzPinyin.Utf16EmptyNode.Pinyin">
            <summary>
            设计用于获得当前节点的拼音字符串，此处总是抛出<see cref="T:System.NotSupportedException"/>。
            </summary>
        </member>
        <member name="M:EzPinyin.Utf16EmptyNode.GetPinyin(System.Char*)">
            <summary>
            获得拼音字符串。
            </summary>
            <param name="cursor">指向输入字符串当前位置的指针，可以作为游标来遍历整个字符串。</param>
            <returns>所获得的字符串。</returns>
        </member>
        <member name="M:EzPinyin.Utf16EmptyNode.GetInitial(System.Char*)">
            <summary>
            获得拼音首字母。
            </summary>
            <param name="cursor">指向输入字符串当前位置的指针，可以作为游标来遍历整个字符串。</param>
            <returns>所获得的首字母。</returns>
        </member>
        <member name="M:EzPinyin.Utf16EmptyNode.WritePinyin(System.Char*@,System.Char*,System.Text.StringBuilder,System.String)">
            <summary>
            将拼音字符串写入到指定的缓存区，并且自动移动游标到下一个字符的位置。
            </summary>
            <param name="cursor">指向输入字符串当前位置的指针，可以作为游标来遍历整个字符串。</param>
            <param name="end">指向输入字符串最后一个字符位置的指针。</param>
            <param name="buffer">用来存储操作结果的缓存区。</param>
            <param name="separator">额外指定的分隔符。</param>
        </member>
        <member name="M:EzPinyin.Utf16EmptyNode.WriteInitial(System.Char*@,System.Char*,System.Text.StringBuilder,System.String)">
            <summary>
            将拼音首字母写入到指定的缓存区，并且自动移动游标到下一个字符的位置。
            </summary>
            <param name="cursor">指向输入字符串当前位置的指针，可以作为游标来遍历整个字符串。</param>
            <param name="end">指向输入字符串最后一个字符位置的指针。</param>
            <param name="buffer">用来存储操作结果的缓存区。</param>
            <param name="separator">额外指定的分隔符。</param>
        </member>
        <member name="M:EzPinyin.Utf16EmptyNode.WritePinyin(System.Char*@,System.Char*,System.String[],System.Int32@)">
            <summary>
            将拼音字符串写入到指定的缓存区，并且自动移动游标与索引到下一个字符的位置。
            </summary>
            <param name="cursor">指向输入字符串当前位置的指针，可以作为游标来遍历整个字符串。</param>
            <param name="end">指向输入字符串最后一个字符位置的指针。</param>
            <param name="buffer">用来存储操作结果的缓存区。</param>
            <param name="index">指示操作结果在缓存区中存储位置的索引值。</param>
        </member>
        <member name="M:EzPinyin.Utf16EmptyNode.FillSeparator(EzPinyin.PinyinNode,System.Text.StringBuilder,System.String)">
            <summary>
            填充分隔符。
            </summary>
            <param name="prev">当前节点的前一个节点，如果当前节点为字符串第一个节点，则此参数值为<see cref="F:EzPinyin.UnknownNode.Instance"/>。</param>
            <param name="buffer">需要填充分隔符的可变字符串。</param>
            <param name="separator">需要填充的分隔符。</param>
            <returns>填充分隔符之后的可变字符串。</returns>
        </member>
        <member name="T:EzPinyin.Utf16Node">
            <summary>
            描述了一个UTF16字符的节点。
            </summary>
        </member>
        <member name="P:EzPinyin.Utf16Node.Pinyin">
            <summary>
            获得当前节点的拼音字符串。
            </summary>
        </member>
        <member name="M:EzPinyin.Utf16Node.GetPinyin(System.Char*)">
            <summary>
            获得拼音字符串。
            </summary>
            <param name="cursor">指向输入字符串当前位置的指针，可以作为游标来遍历整个字符串。</param>
            <returns>所获得的字符串。</returns>
        </member>
        <member name="M:EzPinyin.Utf16Node.GetInitial(System.Char*)">
            <summary>
            获得拼音首字母。
            </summary>
            <param name="cursor">指向输入字符串当前位置的指针，可以作为游标来遍历整个字符串。</param>
            <returns>所获得的首字母。</returns>
        </member>
        <member name="M:EzPinyin.Utf16Node.WritePinyin(System.Char*@,System.Char*,System.Text.StringBuilder,System.String)">
            <summary>
            将拼音字符串写入到指定的缓存区，并且自动移动游标到下一个字符的位置。
            </summary>
            <param name="cursor">指向输入字符串当前位置的指针，可以作为游标来遍历整个字符串。</param>
            <param name="end">指向输入字符串最后一个字符位置的指针。</param>
            <param name="buffer">用来存储操作结果的缓存区。</param>
            <param name="separator">额外指定的分隔符。</param>
        </member>
        <member name="M:EzPinyin.Utf16Node.WriteInitial(System.Char*@,System.Char*,System.Text.StringBuilder,System.String)">
            <summary>
            将拼音首字母写入到指定的缓存区，并且自动移动游标到下一个字符的位置。
            </summary>
            <param name="cursor">指向输入字符串当前位置的指针，可以作为游标来遍历整个字符串。</param>
            <param name="end">指向输入字符串最后一个字符位置的指针。</param>
            <param name="buffer">用来存储操作结果的缓存区。</param>
            <param name="separator">额外指定的分隔符。</param>
        </member>
        <member name="M:EzPinyin.Utf16Node.WritePinyin(System.Char*@,System.Char*,System.String[],System.Int32@)">
            <summary>
            将拼音字符串写入到指定的缓存区，并且自动移动游标与索引到下一个字符的位置。
            </summary>
            <param name="cursor">指向输入字符串当前位置的指针，可以作为游标来遍历整个字符串。</param>
            <param name="end">指向输入字符串最后一个字符位置的指针。</param>
            <param name="buffer">用来存储操作结果的缓存区。</param>
            <param name="index">指示操作结果在缓存区中存储位置的索引值。</param>
        </member>
        <member name="T:EzPinyin.Utf32EmptyNode">
            <summary>
            表示空的UTF32字符节点。
            </summary>
        </member>
        <member name="F:EzPinyin.Utf32EmptyNode.Instance">
            <summary>
            获得空白的UTF32字符节点的实例。
            </summary>
        </member>
        <member name="P:EzPinyin.Utf32EmptyNode.IsSymbol">
            <summary>
            指示是否是一个符号。
            </summary>
        </member>
        <member name="P:EzPinyin.Utf32EmptyNode.NoPinyin">
            <summary>
            指示是否不包含拼音信息。
            </summary>
        </member>
        <member name="P:EzPinyin.Utf32EmptyNode.Pinyin">
            <summary>
            设计用于获得当前节点的拼音字符串，此处总是抛出<see cref="T:System.NotSupportedException"/>。
            </summary>
        </member>
        <member name="M:EzPinyin.Utf32EmptyNode.GetPinyin(System.Char*)">
            <summary>
            获得拼音字符串。
            </summary>
            <param name="cursor">指向输入字符串当前位置的指针，可以作为游标来遍历整个字符串。</param>
            <returns>所获得的字符串。</returns>
        </member>
        <member name="M:EzPinyin.Utf32EmptyNode.GetInitial(System.Char*)">
            <summary>
            获得拼音首字母。
            </summary>
            <param name="cursor">指向输入字符串当前位置的指针，可以作为游标来遍历整个字符串。</param>
            <returns>所获得的首字母。</returns>
        </member>
        <member name="M:EzPinyin.Utf32EmptyNode.WritePinyin(System.Char*@,System.Char*,System.Text.StringBuilder,System.String)">
            <summary>
            将游标处的两个字符写入到指定的缓存区，并且自动移动游标到下一个字符的位置。
            </summary>
            <param name="cursor">指向输入字符串当前位置的指针，可以作为游标来遍历整个字符串。</param>
            <param name="end">指向输入字符串最后一个字符位置的指针。</param>
            <param name="buffer">用来存储操作结果的缓存区。</param>
            <param name="separator">额外指定的分隔符。</param>
        </member>
        <member name="M:EzPinyin.Utf32EmptyNode.WriteInitial(System.Char*@,System.Char*,System.Text.StringBuilder,System.String)">
            <summary>
            将游标处的两个字符写入到指定的缓存区，并且自动移动游标到下一个字符的位置。
            </summary>
            <param name="cursor">指向输入字符串当前位置的指针，可以作为游标来遍历整个字符串。</param>
            <param name="end">指向输入字符串最后一个字符位置的指针。</param>
            <param name="buffer">用来存储操作结果的缓存区。</param>
            <param name="separator">额外指定的分隔符。</param>
        </member>
        <member name="M:EzPinyin.Utf32EmptyNode.WritePinyin(System.Char*@,System.Char*,System.String[],System.Int32@)">
            <summary>
            将拼音字符串写入到指定的缓存区，并且自动移动游标与索引到下一个字符的位置。
            </summary>
            <param name="cursor">指向输入字符串当前位置的指针，可以作为游标来遍历整个字符串。</param>
            <param name="end">指向输入字符串最后一个字符位置的指针。</param>
            <param name="buffer">用来存储操作结果的缓存区。</param>
            <param name="index">指示操作结果在缓存区中存储位置的索引值。</param>
        </member>
        <member name="M:EzPinyin.Utf32EmptyNode.FillSeparator(EzPinyin.PinyinNode,System.Text.StringBuilder,System.String)">
            <summary>
            填充分隔符。
            </summary>
            <param name="prev">当前节点的前一个节点，如果当前节点为字符串第一个节点，则此参数值为<see cref="F:EzPinyin.UnknownNode.Instance"/>。</param>
            <param name="buffer">需要填充分隔符的可变字符串。</param>
            <param name="separator">需要填充的分隔符。</param>
            <returns>填充分隔符之后的可变字符串。</returns>
        </member>
        <member name="T:EzPinyin.Utf32Node">
            <summary>
            描述了一个UTF16字符的节点。
            </summary>
        </member>
        <member name="P:EzPinyin.Utf32Node.Pinyin">
            <summary>
            获得当前节点的拼音字符串。
            </summary>
        </member>
        <member name="M:EzPinyin.Utf32Node.GetPinyin(System.Char*)">
            <summary>
            获得拼音字符串。
            </summary>
            <param name="cursor">指向输入字符串当前位置的指针，可以作为游标来遍历整个字符串。</param>
            <returns>所获得的字符串。</returns>
        </member>
        <member name="M:EzPinyin.Utf32Node.GetInitial(System.Char*)">
            <summary>
            获得拼音首字母。
            </summary>
            <param name="cursor">指向输入字符串当前位置的指针，可以作为游标来遍历整个字符串。</param>
            <returns>所获得的首字母。</returns>
        </member>
        <member name="M:EzPinyin.Utf32Node.WritePinyin(System.Char*@,System.Char*,System.Text.StringBuilder,System.String)">
            <summary>
            将拼音字符串写入到指定的缓存区，并且自动移动游标到下一个字符的位置。
            </summary>
            <param name="cursor">指向输入字符串当前位置的指针，可以作为游标来遍历整个字符串。</param>
            <param name="end">指向输入字符串最后一个字符位置的指针。</param>
            <param name="buffer">用来存储操作结果的缓存区。</param>
            <param name="separator">额外指定的分隔符。</param>
        </member>
        <member name="M:EzPinyin.Utf32Node.WriteInitial(System.Char*@,System.Char*,System.Text.StringBuilder,System.String)">
            <summary>
            将拼音首字母写入到指定的缓存区，并且自动移动游标到下一个字符的位置。
            </summary>
            <param name="cursor">指向输入字符串当前位置的指针，可以作为游标来遍历整个字符串。</param>
            <param name="end">指向输入字符串最后一个字符位置的指针。</param>
            <param name="buffer">用来存储操作结果的缓存区。</param>
            <param name="separator">额外指定的分隔符。</param>
        </member>
        <member name="M:EzPinyin.Utf32Node.WritePinyin(System.Char*@,System.Char*,System.String[],System.Int32@)">
            <summary>
            将拼音字符串写入到指定的缓存区，并且自动移动游标与索引到下一个字符的位置。
            </summary>
            <param name="cursor">指向输入字符串当前位置的指针，可以作为游标来遍历整个字符串。</param>
            <param name="end">指向输入字符串最后一个字符位置的指针。</param>
            <param name="buffer">用来存储操作结果的缓存区。</param>
            <param name="index">指示操作结果在缓存区中存储位置的索引值。</param>
        </member>
        <member name="T:EzPinyin.VariantInfo">
            <summary>
            用来表示某个异体字特性的类。
            </summary>
        </member>
        <member name="P:EzPinyin.VariantInfo.Text">
            <summary>
            对应文本形式的字符。
            </summary>
        </member>
        <member name="P:EzPinyin.VariantInfo.Character">
            <summary>
            异体字字符。
            </summary>
        </member>
        <member name="P:EzPinyin.VariantInfo.VariantType">
            <summary>
            异体字字符的类型。
            </summary>
        </member>
        <member name="M:EzPinyin.VariantInfo.#ctor(System.Char,EzPinyin.VariantType)">
            <summary>
            实例化新的<see cref="T:EzPinyin.VariantInfo"/>。
            </summary>
            <param name="character">字符信息。</param>
            <param name="variantType">字符类型。</param>
        </member>
        <member name="T:EzPinyin.VariantType">
            <summary>
            表示异体字类型的枚举。
            </summary>
        </member>
        <member name="F:EzPinyin.VariantType.Simplified">
            <summary>
            简体字。
            </summary>
        </member>
        <member name="F:EzPinyin.VariantType.Traditional">
            <summary>
            繁体字。
            </summary>
        </member>
    </members>
</doc>
